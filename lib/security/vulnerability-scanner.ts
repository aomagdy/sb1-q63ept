import { exec } from 'child_process'
import { promisify } from 'util'
import { writeFile } from 'fs/promises'

const execAsync = promisify(exec)

interface VulnerabilityScan {
  timestamp: string
  findings: Finding[]
  summary: {
    high: number
    medium: number
    low: number
  }
}

interface Finding {
  severity: 'high' | 'medium' | 'low'
  title: string
  description: string
  recommendation: string
}

export async function runSecurityScan(): Promise<VulnerabilityScan> {
  const scan: VulnerabilityScan = {
    timestamp: new Date().toISOString(),
    findings: [],
    summary: { high: 0, medium: 0, low: 0 }
  }

  try {
    // Run npm audit
    const { stdout: npmAudit } = await execAsync('npm audit --json')
    const auditResults = JSON.parse(npmAudit)

    // Process npm audit findings
    for (const vulnerability of auditResults.advisories || []) {
      const finding: Finding = {
        severity: vulnerability.severity,
        title: vulnerability.title,
        description: vulnerability.overview,
        recommendation: vulnerability.recommendation
      }
      scan.findings.push(finding)
      scan.summary[finding.severity]++
    }

    // Save scan results
    await writeFile(
      `security-scan-${scan.timestamp}.json`,
      JSON.stringify(scan, null, 2)
    )

    return scan
  } catch (error) {
    console.error('Security scan failed:', error)
    throw error
  }
}